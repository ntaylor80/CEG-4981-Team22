import cv2
import numpy as np
from PIL import Image
from io import BytesIO
import base64
from math import sqrt


base64_str = ""
# BGR [low] [high] values OpenCV reverses color order
boundaries = [
    ([173, 63, 0], [255, 179, 135]),  # Blue mask lower/upper
    ([0, 69, 200], [0, 147, 255])  # Orange mask Lower/Upper
]



def analyze_image(image):


    pil_img = Image.open(BytesIO(base64.b64decode(image))).convert('RGB')

    img = cv2.cvtColor(np.array(pil_img), cv2.COLOR_RGB2GRAY)

    img_color = cv2.cvtColor(np.array(pil_img), cv2.COLOR_RGB2BGR)
    countStars(img)

    result = list()
    for (lower, upper) in boundaries:
        # create NumPy arrays from the boundaries
        lower = np.array(lower, dtype="uint8")
        upper = np.array(upper, dtype="uint8")

        # find the colors within the specified boundaries and apply
        # the mask
        mask = cv2.inRange(img_color, lower, upper)
        cv2.imwrite("mask.png",mask)
        result.append(countStars(mask))

    return result


def countStars(image):
    ret, thresh = cv2.threshold(image, 127, 255, 0)
    img, contours, hierarchy = cv2.findContours(thresh, 1, 2)

    starCount = 0
    divMaxSize = 0.175
    divMinSize = 0.125
    for contour in contours:

        cnt = contour
        area = cv2.contourArea(cnt)
        arcLen = cv2.arcLength(cnt, True)
        prop = sqrt(area) / arcLen
        if (prop < divMaxSize and prop > divMinSize):
            # print("I'm a star")
            starCount += 1

    print(starCount)
    return starCount
